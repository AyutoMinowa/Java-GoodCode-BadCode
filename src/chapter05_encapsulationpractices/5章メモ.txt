プリミティブ型だけで実装すると、強く関係しあうデータとロジックをうまくカプセル化できない。
データとロジックが別のクラスに定義されてしまい、カプセル化がされない。
横断的関心事の代表例(ログ出力、エラー検出、デバッグ、例外処理、キャッシュ、同期処理、分散処理)
横断的関心事はstaticメソッドでもよい
結果を返すために引数を使わないこと。出力引数として設計せず、カプセル化の基本にもとづいてデータとデータを操作するロジックを同じクラスにまとめる。
引数が多すぎる字体に陥らないためには、概念的に意味のあるクラスをつくる。
「.」で数珠つなぎにして、階層構造になっているクラスの要素にアクセス書き方は、関係ロジックがバラバラになるためあまり良くない書き方。

尋ねるな、命じろ(Tell, Don't Ask.)
他のオブジェクトの内部状態を尋ねたり、その状態に応じて呼び出し側が判断したりするのではなく、呼び出し側は出たメソッドで命ずるだけで、命令された側で適切な判断や制御するよう設計する。