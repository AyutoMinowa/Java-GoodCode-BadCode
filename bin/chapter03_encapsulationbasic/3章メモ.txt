変更容易性を高める設計
・カプセル化
・関心の分離
・多態性による機能の取り換え

必ず自信のクラスのインスタンス変数を操作するよう実装することが重要
良いクラスの構成要素
・インスタンス変数
・完全性を保証するようにインスタンス変数を操作するメソッド

設計パターン：効果
完全コンストラクタ：不正状態から防護できる
値オブジェクト：アプリケーションで扱う値に関するロジックをカプセル化する
ストラテジ：条件分岐を削減し、ロジックを単純化する
ポリシー：条件分岐を単純化したり、カスタマイズできるようにする
ファーストクラスコレクション：コレクションに関するロジックをカプセル化する
スプラウトクラス：既存のロジックを変更さずに完全に新機能を追加する