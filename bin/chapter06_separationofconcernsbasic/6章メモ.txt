関心の分離とは、それぞれの関心でモジュールを独立させ、他の関心と分離する考え方。
関心事それぞれのクラスへ分割すると、分割した各クラスの役割が明確になり、わかりやすい設計になる。
強く関係していそうなロジックを一箇所にまとめ上げようとしたものの、結果として様々な関心事が紛れ込んできて、クラスがどんどん膨れ上がるケースがよくある。
目的ごとに分離し、カプセル化する、という設計が関心を上手く分離するうえで重要。

インタフェースと実装の分離
・インターフェイスパート：モジュールの機能と使い方を定義する部分。関数やメソッドといったインタフェースから構成される。
・実装パート：モジュールの機能を実現するための、モジュール内部の実装部分。データとロジックから構成される。
実装パートであるインスタンス変数や詳細ロジックをモジュールの外に露出しないこと。モジュール間はインターフェースを呼び出す関係だけにする。

インタフェースパートの設計手順
・まず、獲得したい結果を定義する
・次に、結果の獲得に必要な入力を定義する
・結果と入力に基づいてインタフェースの仕様を定義する

関心の分離がうまくいかない原因
・入力、結果、結果を得るための詳細実装を特に意識せず、ごちゃ混ぜになっている
・ロジックを利用する側と利用される側(開発する側)の視点の違いを意識できていない