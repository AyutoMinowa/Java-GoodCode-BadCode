早期returnでネストを解消する。
同じ条件式の条件分岐を複数書かず、一箇所にまとめよう。
interfaceを使うと、条件分岐と同じことが実現できる。
条件分岐で機能を切り替える仕組みから、interfaceで機能を取り換える仕組みに変えることで構造をシンプルになる。

interfaceをswitch文重複に応用させる(ストラテジパターン)
interfaceの名前の決め方
「取り替えたい機能の目的」に注目して名前を決める

interfaceを用いて設計するケース
・機能を取り替える単位を見つける
・インタフェースと実装の分離に基づき結果と入力を整理する
・interfaceを定義する
・interfaceを実装する
・機能を取り替える仕組みを作る

ポリシーパターン
判定条件（ルール）を部品化し、部品化した条件の組み換えを可能にする。

型の判断で分岐をしないこと。

boolean型引数をフラグ引数と呼ぶ。
フラグ引数は、何が起こるか読み手に想像を難しくさせる。

設計スキルごとの考え方の違い
【処理の切り替え】
初心者：迷わずifやswitch文を使う
中級以上:interface設計を試みる

【条件ごとの処理】
初級者：if文やswitch文の中に詳細なロジックをベタ書きする
中級以上：条件ごとの処理を別のクラスに分ける

「分岐を書きそうになったら、まずinterfaceを考える。分岐ではなく機能の取り替え」を意識する。